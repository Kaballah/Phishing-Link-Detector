import tkinter as tk
from tkinter import scrolledtext, messagebox
import requests
import re
import ssl
import socket
import whois
from urllib.parse import urlparse

def check_all():
    check_url()
    check_ssl_tls()
    check_phishing_database()
    analyze_content()
    check_url_obfuscation()

def check_url():
    url = url_entry.get()
    result_text.delete(1.0, tk.END)
    
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    
    parsed_url = urlparse(url)
    domain = parsed_url.netloc
    if domain.startswith('www.'):
        domain = domain[4:]
    
    try:
        response = requests.get(url, timeout=5)
        content = response.text.lower()
        
        suspicious_words = ['login', 'password', 'credit card', 'ssn', 'social security']
        has_suspicious_words = any(word in content for word in suspicious_words)
        has_ip_url = re.match(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}', domain)
        
        if has_suspicious_words or has_ip_url:
            result_text.insert(tk.END, "⚠️ Potentially Malicious Link! Exercise caution.\n\n")
            result_text.insert(tk.END, "This link has been identified as potentially malicious.\n")
            result_text.insert(tk.END, "Potential issues:\n")
            if has_suspicious_words:
                result_text.insert(tk.END, "- Contains suspicious keywords related to sensitive information\n")
            if has_ip_url:
                result_text.insert(tk.END, "- Uses an IP address instead of a domain name\n")
            result_text.insert(tk.END, "\nThis link may attempt to steal your personal information or infect your device with malware.")
            
            if 'paypal' in domain:
                result_text.insert(tk.END, "\n\nLegitimate URL: https://www.paypal.com")
            elif 'amazon' in domain:
                result_text.insert(tk.END, "\n\nLegitimate URL: https://www.amazon.com")
            elif 'bank' in domain:
                result_text.insert(tk.END, "\n\nPlease visit your bank's official website directly.")
        else:
            result_text.insert(tk.END, "This link appears to be safe.\n")
            result_text.insert(tk.END, "However, always exercise caution when clicking on links from unknown sources.")
        
        if url.startswith('http://'):
            result_text.insert(tk.END, "\n\nWarning: This site uses HTTP instead of HTTPS. It is not secure for transmitting sensitive information.")
    
    except requests.RequestException:
        result_text.insert(tk.END, "Error: Unable to access the URL. It may be invalid or inaccessible.")

def check_ssl_tls():
    url = url_entry.get()
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    
    parsed_url = urlparse(url)
    domain = parsed_url.netloc
    if domain.startswith('www.'):
        domain = domain[4:]
    
    try:
        context = ssl.create_default_context()
        with socket.create_connection((domain, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as secure_sock:
                cert = secure_sock.getpeercert()
        
        result_text.insert(tk.END, "\n\nSSL/TLS Certificate Information:\n")
        result_text.insert(tk.END, f"Issued to: {cert['subject'][0][0][1]}\n")
        result_text.insert(tk.END, f"Issued by: {cert['issuer'][0][0][1]}\n")
        result_text.insert(tk.END, f"Version: {cert['version']}\n")
        result_text.insert(tk.END, f"Serial Number: {cert['serialNumber']}\n")
        result_text.insert(tk.END, "The connection is secure.\n")
    except Exception as e:
        result_text.insert(tk.END, f"\n\nError checking SSL/TLS: {str(e)}\n")

def check_phishing_database():
    # This is a placeholder function. In a real-world scenario, you would
    # integrate with a real phishing URL database API.
    result_text.insert(tk.END, "\n\nPhishing Database Check:\n")
    result_text.insert(tk.END, "The URL is not found in our phishing database.\n")
    result_text.insert(tk.END, "(Note: This is a simulated result. Integrate with a real database for accurate results.)\n")

def analyze_content():
    url = url_entry.get()
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    
    try:
        response = requests.get(url, timeout=5)
        content = response.text.lower()
        
        result_text.insert(tk.END, "\n\nContent Analysis:\n")
        if 'password' in content or 'login' in content:
            result_text.insert(tk.END, "- The page contains login or password fields. Be cautious about entering sensitive information.\n")
        if 'download' in content:
            result_text.insert(tk.END, "- The page contains download links. Be careful about downloading files from unknown sources.\n")
        if 'javascript:' in content:
            result_text.insert(tk.END, "- The page uses JavaScript. While common, malicious sites may use it for harmful purposes.\n")
        result_text.insert(tk.END, "Always verify the legitimacy of a website before entering sensitive information.\n")
    except requests.RequestException:
        result_text.insert(tk.END, "Error: Unable to access the URL for content analysis.\n")

def check_url_obfuscation():
    url = url_entry.get()
    result_text.insert(tk.END, "\n\nURL Obfuscation Check:\n")
    
    if '@' in url:
        result_text.insert(tk.END, "- Warning: URL contains '@' symbol, which can be used for obfuscation.\n")
    if '%' in url:
        result_text.insert(tk.END, "- Warning: URL contains encoded characters ('%'), which can be used for obfuscation.\n")
    if 'bit.ly' in url or 'tinyurl' in url or 'goo.gl' in url:
        result_text.insert(tk.END, "- Warning: URL appears to be shortened, which can hide the true destination.\n")
    if len(url) > 100:
        result_text.insert(tk.END, "- Warning: URL is unusually long, which can be a sign of obfuscation.\n")
    
    if '@' not in url and '%' not in url and 'bit.ly' not in url and 'tinyurl' not in url and 'goo.gl' not in url and len(url) <= 100:
        result_text.insert(tk.END, "No obvious signs of URL obfuscation detected.\n")

def clear_all():
    url_entry.delete(0, tk.END)
    result_text.delete(1.0, tk.END)

# Create the main window
root = tk.Tk()
root.title("Advanced Phishing Link Detector")
root.geometry("600x500")
root.resizable(False, False)  # Prevent window resizing

# Create and place the URL entry field
url_label = tk.Label(root, text="Enter URL:")
url_label.pack(pady=5)
url_entry = tk.Entry(root, width=60)
url_entry.pack(pady=5)

# Create and place the buttons
button_frame = tk.Frame(root)
button_frame.pack(pady=10)

check_all_button = tk.Button(button_frame, text="Check All", command=check_all)
check_all_button.grid(row=0, column=0, padx=5)

check_url_button = tk.Button(button_frame, text="Basic URL Check", command=check_url)
check_url_button.grid(row=0, column=1, padx=5)

check_ssl_button = tk.Button(button_frame, text="Check SSL/TLS", command=check_ssl_tls)
check_ssl_button.grid(row=0, column=2, padx=5)

check_database_button = tk.Button(button_frame, text="Check Phishing DB", command=check_phishing_database)
check_database_button.grid(row=1, column=0, padx=5, pady=5)

analyze_content_button = tk.Button(button_frame, text="Analyze Content", command=analyze_content)
analyze_content_button.grid(row=1, column=1, padx=5, pady=5)

check_obfuscation_button = tk.Button(button_frame, text="Check Obfuscation", command=check_url_obfuscation)
check_obfuscation_button.grid(row=1, column=2, padx=5, pady=5)

clear_button = tk.Button(button_frame, text="Clear All", command=clear_all)
clear_button.grid(row=2, column=1, pady=5)

# Create and place the result text area
result_text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=70, height=20)
result_text.pack(pady=10)

# Start the GUI event loop
root.mainloop()
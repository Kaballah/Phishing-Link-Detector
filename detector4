import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import requests
import re
import ssl
import socket
import whois
from urllib.parse import urlparse
import csv
from datetime import datetime, timedelta
import os
import threading
import time
from bs4 import BeautifulSoup

# File to store the phishing URLs
PHISHING_DB_FILE = 'phishing_urls.csv'
# URL of the PhishTank feed
PHISHTANK_URL = 'https://phishtank.org/phish_search.php?valid=y&active=y&Search=Search'
# Update frequency in hours
UPDATE_FREQUENCY = 1

def update_phishing_database():
    try:
        response = requests.get(PHISHTANK_URL)
        soup = BeautifulSoup(response.content, 'html.parser')
        urls = [a['href'] for a in soup.find_all('a', href=True) if '/phish_detail.php?phish_id=' in a['href']]
        
        with open(PHISHING_DB_FILE, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['URL', 'Date Added'])
            for url in urls:
                if url.strip():
                    writer.writerow([url.strip(), datetime.now().strftime('%Y-%m-%d %H:%M:%S')])
        
        print(f"Phishing database updated. {len(urls)} URLs added.")
    except Exception as e:
        print(f"Error updating phishing database: {str(e)}")

def check_database_update():
    if not os.path.exists(PHISHING_DB_FILE):
        update_phishing_database()
    else:
        file_modified_time = datetime.fromtimestamp(os.path.getmtime(PHISHING_DB_FILE))
        if datetime.now() - file_modified_time > timedelta(hours=UPDATE_FREQUENCY):
            update_phishing_database()

def is_valid_url(url):
    regex = re.compile(
        r'^(?:http|ftp)s?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
        r'localhost|'  # ...or ip
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return re.match(regex, url) is not None

def paste_url():
    try:
        url = root.clipboard_get()
        if is_valid_url(url):
            url_entry.delete(0, tk.END)
            url_entry.insert(0, url)
        else:
            messagebox.showwarning("Invalid URL", "The clipboard content is not a valid URL.")
    except tk.TclError:
        messagebox.showwarning("Empty Clipboard", "The clipboard is empty or contains invalid data.")

def run_check(check_function):
    progress_window = tk.Toplevel(root)
    progress_window.title("Scan Progress")
    progress_window.geometry("300x100")
    
    progress = ttk.Progressbar(progress_window, orient="horizontal", length=200, mode="determinate")
    progress.pack(pady=10)
    
    percentage_label = ttk.Label(progress_window, text="0%")
    percentage_label.pack()
    
    time_label = ttk.Label(progress_window, text="Time: 0s")
    time_label.pack()
    
    start_time = time.time()
    
    def update_progress(current, total):
        percentage = int((current / total) * 100)
        progress['value'] = percentage
        percentage_label['text'] = f"{percentage}%"
        elapsed_time = int(time.time() - start_time)
        time_label['text'] = f"Time: {elapsed_time}s"
        if current < total:
            progress_window.after(100, update_progress, current + 1, total)
        else:
            progress_window.destroy()
    
    threading.Thread(target=check_function).start()
    update_progress(0, 100)

def check_all():
    url = url_entry.get()
    if not is_valid_url(url):
        result_text.config(state='normal')
        result_text.delete(1.0, tk.END)
        result_text.insert(tk.END, "The entered text is not a valid URL.", "red")
        result_text.config(state='disabled')
        return
    
    def run_checks():
        check_url()
        result_text.config(state='normal')
        result_text.insert(tk.END, "\n" + "-"*70)
        result_text.config(state='disabled')
        
        check_ssl_tls()
        result_text.config(state='normal')
        result_text.insert(tk.END, "\n" + "-"*70)
        result_text.config(state='disabled')
        
        check_phishing_database()
        result_text.config(state='normal')
        result_text.insert(tk.END, "\n" + "-"*70)
        result_text.config(state='disabled')
        
        analyze_content()
        result_text.config(state='normal')
        result_text.insert(tk.END, "\n" + "-"*70)
        result_text.config(state='disabled')
        
        check_url_obfuscation()
    
    run_check(run_checks)

def check_url():
    url = url_entry.get()
    result_text.config(state='normal')
    result_text.delete(1.0, tk.END)
    
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    
    parsed_url = urlparse(url)
    domain = parsed_url.netloc
    if domain.startswith('www.'):
        domain = domain[4:]
    
    try:
        response = requests.get(url, timeout=5)
        content = response.text.lower()
        
        suspicious_words = ['login', 'password', 'credit card', 'ssn', 'social security']
        has_suspicious_words = any(word in content for word in suspicious_words)
        has_ip_url = re.match(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}', domain)
        
        if has_suspicious_words or has_ip_url:
            result_text.insert(tk.END, "⚠️ Potentially Malicious Link! Exercise caution.\n\n", "red")
            result_text.insert(tk.END, "This link has been identified as potentially malicious.\n", "red")
            result_text.insert(tk.END, "Potential issues:\n", "red")
            if has_suspicious_words:
                result_text.insert(tk.END, "- Contains suspicious keywords related to sensitive information\n", "red")
            if has_ip_url:
                result_text.insert(tk.END, "- Uses an IP address instead of a domain name\n", "red")
            result_text.insert(tk.END, "\nThis link may attempt to steal your personal information or infect your device with malware.", "red")
            
            if 'paypal' in domain:
                result_text.insert(tk.END, "\n\nLegitimate URL: https://www.paypal.com", "red")
            elif 'amazon' in domain:
                result_text.insert(tk.END, "\n\nLegitimate URL: https://www.amazon.com", "red")
            elif 'bank' in domain:
                result_text.insert(tk.END, "\n\nPlease visit your bank's official website directly.", "red")
        else:
            result_text.insert(tk.END, "This link appears to be safe.\n", "green")
            result_text.insert(tk.END, "However, always exercise caution when clicking on links from unknown sources.", "green")
        
        if url.startswith('http://'):
            result_text.insert(tk.END, "\n\nWarning: This site uses HTTP instead of HTTPS. It is not secure for transmitting sensitive information.", "orange")
    
    except requests.RequestException:
        result_text.insert(tk.END, "Error: Unable to access the URL. It may be invalid or inaccessible.", "red")
    
    result_text.config(state='disabled')

def check_ssl_tls():
    url = url_entry.get()
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    
    parsed_url = urlparse(url)
    domain = parsed_url.netloc
    if domain.startswith('www.'):
        domain = domain[4:]
    
    try:
        context = ssl.create_default_context()
        with socket.create_connection((domain, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as secure_sock:
                cert = secure_sock.getpeercert()
        
        result_text.config(state='normal')
        result_text.insert(tk.END, "\n\nSSL/TLS Certificate Information:\n", "blue")
        result_text.insert(tk.END, f"Issued to: {cert['subject'][0][0][1]}\n", "blue")
        result_text.insert(tk.END, f"Issued by: {cert['issuer'][0][0][1]}\n", "blue")
        result_text.insert(tk.END, f"Version: {cert['version']}\n", "blue")
        result_text.insert(tk.END, f"Serial Number: {cert['serialNumber']}\n", "blue")
        result_text.insert(tk.END, "The connection is secure.\n", "blue")
        result_text.config(state='disabled')
    except Exception as e:
        result_text.config(state='normal')
        result_text.insert(tk.END, f"\n\nError checking SSL/TLS: {str(e)}\n", "red")
        result_text.config(state='disabled')

def check_phishing_database():
    check_database_update()
    url = url_entry.get()
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    
    result_text.config(state='normal')
    result_text.insert(tk.END, "\n\nPhishing Database Check:\n", "purple")
    
    try:
        with open(PHISHING_DB_FILE, 'r') as file:
            reader = csv.reader(file)
            next(reader)  # Skip header
            for row in reader:
                if url.strip().lower() == row[0].strip().lower():
                    result_text.insert(tk.END, f"⚠️ URL found in phishing database.\n", "red")
                    result_text.insert(tk.END, f"Date added: {row[1]}\n", "purple")
                    result_text.config(state='disabled')
                    return
        
        result_text.insert(tk.END, "URL not found in phishing database.\n", "green")
    except Exception as e:
        result_text.insert(tk.END, f"Error checking phishing database: {str(e)}\n", "red")
    
    result_text.config(state='disabled')

def analyze_content():
    url = url_entry.get()
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    
    try:
        response = requests.get(url, timeout=5)
        content = response.text.lower()
        
        result_text.config(state='normal')
        result_text.insert(tk.END, "\n\nContent Analysis:\n", "cyan")
        if 'password' in content or 'login' in content:
            result_text.insert(tk.END, "- The page contains login or password fields. Be cautious about entering sensitive information.\n", "cyan")
        if 'download' in content:
            result_text.insert(tk.END, "- The page contains download links. Be careful about downloading files from unknown sources.\n", "cyan")
        if 'javascript:' in content:
            result_text.insert(tk.END, "- The page uses JavaScript. While common, malicious sites may use it for harmful purposes.\n", "cyan")
        result_text.insert(tk.END, "Always verify the legitimacy of a website before entering sensitive information.\n", "cyan")
        result_text.config(state='disabled')
    except requests.RequestException:
        result_text.config(state='normal')
        result_text.insert(tk.END, "Error: Unable to access the URL for content analysis.\n", "red")
        result_text.config(state='disabled')

def check_url_obfuscation():
    url = url_entry.get()
    result_text.config(state='normal')
    result_text.insert(tk.END, "\n\nURL Obfuscation Check:\n", "magenta")
    
    if '@' in url:
        result_text.insert(tk.END, "- Warning: URL contains '@' symbol, which can be used for obfuscation.\n", "magenta")
    if '%' in url:
        result_text.insert(tk.END, "- Warning: URL contains encoded characters ('%'), which can be used for obfuscation.\n", "magenta")
    if 'bit.ly' in url or 'tinyurl' in url or 'goo.gl' in url:
        result_text.insert(tk.END, "- Warning: URL appears to be shortened, which can hide the true destination.\n", "magenta")
    if len(url) > 100:
        result_text.insert(tk.END, "- Warning: URL is unusually long, which can be a sign of obfuscation.\n", "magenta")
    
    if '@' not in url and '%' not in url and 'bit.ly' not in url and 'tinyurl' not in url and 'goo.gl' not in url and len(url) <= 100:
        result_text.insert(tk.END, "No obvious signs of URL obfuscation detected.\n", "magenta")
    
    result_text.config(state='disabled')

def clear_all():
    url_entry.delete(0, tk.END)
    result_text.config(state='normal')
    result_text.delete(1.0, tk.END)
    result_text.config(state='disabled')

def export_to_csv():
    file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv")])
    if file_path:
        with open(file_path, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["Check Type", "Result"])
            lines = result_text.get(1.0, tk.END).split('\n')
            current_check = ""
            for line in lines:
                if line.strip() == "-"*50:
                    current_check = ""
                elif line.strip() and not line.startswith("-"):
                    if not current_check:
                        current_check = line.strip()
                    else:
                        writer.writerow([current_check, line.strip()])
        messagebox.showinfo("Export Successful", f"Results exported to {file_path}")

def change_theme(theme):
    style.theme_use(theme)
    messagebox.showinfo("Theme Changed", f"Theme changed to {theme}")

# Create the main window
root = tk.Tk()
root.title("Advanced Phishing Link Detector")
root.geometry("600x600")
root.resizable(False, False)  # Prevent window resizing

# Create a style object
style = ttk.Style(root)

# Create menu bar
menu_bar = tk.Menu(root)
root.config(menu=menu_bar)

# File menu
file_menu = tk.Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="File", menu=file_menu)
file_menu.add_command(label="Export Results", command=export_to_csv)
file_menu.add_separator()
file_menu.add_command(label="Exit", command=root.quit)

# Theme menu
theme_menu = tk.Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="Theme", menu=theme_menu)

# Get available themes and add them to the menu
available_themes = style.theme_names()
for theme in available_themes:
    theme_menu.add_command(label=theme, command=lambda t=theme: change_theme(t))

# Create and place the URL entry field
url_label = ttk.Label(root, text="Enter URL:")
url_label.pack(pady=5)
url_frame = ttk.Frame(root)
url_frame.pack(pady=5)
url_entry = ttk.Entry(url_frame, width=50)
url_entry.pack(side=tk.LEFT)
paste_button = ttk.Button(url_frame, text="Paste", command=paste_url)
paste_button.pack(side=tk.LEFT, padx=5)

# Create and place the buttons
button_frame = ttk.Frame(root)
button_frame.pack(pady=10)

button_style = {'width': 15}

check_all_button = ttk.Button(button_frame, text="Check All", command=lambda: run_check(check_all), **button_style)
check_all_button.grid(row=0, column=0, padx=5, pady=5)

check_url_button = ttk.Button(button_frame, text="Basic URL Check", command=lambda: run_check(check_url), **button_style)
check_url_button.grid(row=0, column=1, padx=5, pady=5)

check_ssl_button = ttk.Button(button_frame, text="Check SSL/TLS", command=lambda: run_check(check_ssl_tls), **button_style)
check_ssl_button.grid(row=0, column=2, padx=5, pady=5)

check_database_button = ttk.Button(button_frame, text="Check Phishing DB", command=lambda: run_check(check_phishing_database), **button_style)
check_database_button.grid(row=1, column=0, padx=5, pady=5)

analyze_content_button = ttk.Button(button_frame, text="Analyze Content", command=lambda: run_check(analyze_content), **button_style)
analyze_content_button.grid(row=1, column=1, padx=5, pady=5)

check_obfuscation_button = ttk.Button(button_frame, text="Check Obfuscation", command=lambda: run_check(check_url_obfuscation), **button_style)
check_obfuscation_button.grid(row=1, column=2, padx=5, pady=5)

# Create and place the result text area
result_text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=70, height=20, state='disabled')
result_text.pack(pady=10)

# Configure text colors
result_text.tag_configure("red", foreground="red")
result_text.tag_configure("green", foreground="green")
result_text.tag_configure("blue", foreground="blue")
result_text.tag_configure("orange", foreground="orange")
result_text.tag_configure("purple", foreground="purple")
result_text.tag_configure("cyan", foreground="cyan")
result_text.tag_configure("magenta", foreground="magenta")

# Create and place the Clear All button
clear_button = ttk.Button(root, text="Clear All", command=clear_all, width=15)
clear_button.pack(side=tk.RIGHT, padx=10, pady=10)

# Start the GUI event loop
root.mainloop()
